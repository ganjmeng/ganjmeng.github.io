<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>感觉萌的Blog</title>
  <subtitle>欲罢不能，想想都有点小激动。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ganmmeng.cn/"/>
  <updated>2016-05-13T01:46:53.000Z</updated>
  <id>http://ganmmeng.cn/</id>
  
  <author>
    <name>Gan Meng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[转]runtime从入门到放弃</title>
    <link href="http://ganmmeng.cn/2016/05/13/untitled-1463103388379/"/>
    <id>http://ganmmeng.cn/2016/05/13/untitled-1463103388379/</id>
    <published>2016-05-13T01:36:28.000Z</published>
    <updated>2016-05-13T01:46:53.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xtu7q.com1.z0.glb.clouddn.com/16-5-12/7638807.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文为转载&lt;br&gt;原文地址：  &lt;a href=&quot;http://xiaopingblog.cn/2016/05/06/runtime%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;孝平的博客 —— runtime从入门到放弃&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h1 id=&quot;GG-背景&quot;&gt;&lt;a href=&quot;#GG-背景&quot; class=&quot;headerlink&quot; title=&quot;GG 背景&quot;&gt;&lt;/a&gt;GG 背景&lt;/h1&gt;&lt;p&gt;本篇不适应&lt;code&gt;runtime&lt;/code&gt;学习，也不涉及&lt;code&gt;runtime&lt;/code&gt;长篇大论的理论知识。本篇只是想让你适当的学会放手。而所谓的入门到放弃中的&lt;code&gt;入门&lt;/code&gt;则是一些&lt;code&gt;runtime&lt;/code&gt;常用&lt;code&gt;apis&lt;/code&gt;的认识和使用场景（笔者工作总结）。而所谓的放弃就是不要太过于执着&lt;code&gt;runtime&lt;/code&gt;，其实它并没有你想象中的那么好。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h1 id=&quot;来嗨起来&quot;&gt;&lt;a href=&quot;#来嗨起来&quot; class=&quot;headerlink&quot; title=&quot;来嗨起来&quot;&gt;&lt;/a&gt;来嗨起来&lt;/h1&gt;&lt;p&gt;现在就让我们开始来旅游&lt;code&gt;runtime&lt;/code&gt;的世界吧~！&lt;/p&gt;&lt;br&gt;    &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h2 id=&quot;关联&quot;&gt;&lt;a href=&quot;#关联&quot; class=&quot;headerlink&quot; title=&quot;关联&quot;&gt;&lt;/a&gt;关联&lt;/h2&gt;&lt;p&gt;&lt;code&gt;objc_setAssociatedObject&lt;/code&gt; 关联，懂点&lt;code&gt;runtime&lt;/code&gt;或者不懂&lt;code&gt;runtime&lt;/code&gt;的应该都知道这个家伙吧。再或者在分类里也应该见过不少了吧。不讲它用法，只分享笔者经历。&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;关联的用处一般是用来在分类里定义属性，分别在属性的&lt;code&gt;set&lt;/code&gt;和&lt;code&gt;get&lt;/code&gt;方法里存放或者获取属性的值。当然还有一个用处也比较实用，则是强引用自己，并且不要释放。&lt;/p&gt;&lt;br&gt;&lt;p&gt;强引用自己？嗯哼？怎么有一点晕晕的。好吧，举个列子。&lt;/p&gt;&lt;br&gt;&lt;p&gt;需求（可忽略）：&lt;/p&gt;&lt;br&gt;&lt;p&gt;比如你有一个&lt;code&gt;ZXPAAA&lt;/code&gt;的&lt;code&gt;class&lt;/code&gt;，然后&lt;code&gt;ZXPAAA&lt;/code&gt;里有&lt;code&gt;show&lt;/code&gt;和&lt;code&gt;dismiss&lt;/code&gt;方法，并且还有一个&lt;code&gt;delegate&lt;/code&gt;回调。然后你还有一个&lt;code&gt;ZXPBBB&lt;/code&gt;的&lt;code&gt;class&lt;/code&gt;并且有一个函数叫&lt;code&gt;test&lt;/code&gt;。现在&lt;code&gt;test&lt;/code&gt;函数里有一个局部自动变量&lt;code&gt;ZXPAAA&lt;/code&gt;的实例，并且调用&lt;code&gt;ZXPAAA的show&lt;/code&gt;方法来弹出一个视图。&lt;/p&gt;&lt;br&gt;&lt;p&gt;那么问题来了，这时候你在&lt;code&gt;ZXPBBB的test方法&lt;/code&gt;里设置&lt;code&gt;ZXPAAA&lt;/code&gt;的delegate为&lt;code&gt;self&lt;/code&gt;（self=ZXPBBB）的时候，因为&lt;code&gt;ZXPAAA&lt;/code&gt;是局部自动变量，所以在&lt;code&gt;test&lt;/code&gt;函数执行完之前，函数内部的&lt;code&gt;ZXPAAA&lt;/code&gt;实例变量的引用计数会减一，由于你只是实例化了一下，引用计数为一，然后在减一，故此，此变量会释放，然后在这时候你遵守的&lt;code&gt;ZXPAAA&lt;/code&gt;的delegate方法永远不会回调。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;解决：&lt;/strong&gt; 那么这时候你就可以在&lt;code&gt;ZXPAAA&lt;/code&gt;里的&lt;code&gt;show&lt;/code&gt;方法用objc_setAssociatedObject来关联自己并设置&lt;code&gt;retain&lt;/code&gt;引用+1。让self不会释放，代码如下：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//ZXPAAA的show 方法里，关联自己，会引用计数+1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_setAssociatedObject(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, key, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, OBJC_ASSO&lt;span class=&quot;built_in&quot;&gt;CIATION_RETAIN_NONATOMIC&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;目前为止确实是解决了对象自动释放的问题，可问题是对象一直存在呀。内存泄露了尼。不用怕，我们在ZXPAAA的dismiss 方法里释放关联就行了。代码如下：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//ZXPAAA的dismiss 方法里，从关联里移除，设置为nil,会引用计数-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;objc_setAssociatedObject(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;, key, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, OBJC_ASSO&lt;span class=&quot;built_in&quot;&gt;CIATION_ASSIGN&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/biggercoffee/ZXPPickerView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;之前简单封装了一个pickerView工具类里面有用到类似场景，点此进行传输进行查看。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i4.piimg.com/dcf0eb7370dfa216.jpg&quot; alt=&quot;乐一乐&quot;&gt;&lt;/p&gt;&lt;br&gt;&lt;h2 id=&quot;获取class的所有方法（包含私有）&quot;&gt;&lt;a href=&quot;#获取class的所有方法（包含私有）&quot; class=&quot;headerlink&quot; title=&quot;获取class的所有方法（包含私有）&quot;&gt;&lt;/a&gt;获取class的所有方法（包含私有）&lt;/h2&gt;&lt;p&gt;核心方法是&lt;code&gt;class_copyMethodList&lt;/code&gt;，直接贴代码：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uint count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//返回值是一个Method指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Method *methodList = class_copyMethodList([&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; class], &amp;amp;count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i &amp;lt; count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@”%@”&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;NSStringFromSelector&lt;/span&gt;(method_getName(methodList[i])));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//释放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    free(methodList);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;以上这串代码，看似很牛逼。。其实用一句话来形容就是&lt;code&gt;just so so&lt;/code&gt;而已。其实最主要的是并没有任何一点实际用处。就算知道了很多私有方法，你想去完美的运用它也需要很多时间成本，而且&lt;code&gt;app store&lt;/code&gt;还不会给你上线(企业发布除外)。&lt;/p&gt;&lt;br&gt;&lt;blockquote&gt;&lt;br&gt;&lt;p&gt;PS：更多用法直接去查看.h文件即可。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;h2 id=&quot;获取class的所有变量（包含私有）&quot;&gt;&lt;a href=&quot;#获取class的所有变量（包含私有）&quot; class=&quot;headerlink&quot; title=&quot;获取class的所有变量（包含私有）&quot;&gt;&lt;/a&gt;获取class的所有变量（包含私有）&lt;/h2&gt;&lt;p&gt;核心方法是&lt;code&gt;class_copyIvarList&lt;/code&gt;，直接贴代码：&lt;br&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;uint count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//返回值是一个Ivar指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Ivar *ivarList = class_copyIvarList([&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; class], &amp;amp;count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ( &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ; i &amp;lt; count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@”%s”&lt;/span&gt;,ivar_getName(ivarList[i]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//释放&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    free(ivarList);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;获取变量和获取方法同理，然并卵，但作为兴趣研究研究的话，还是可以玩玩的。在工程里的实际用处也并不大。&lt;/p&gt;&lt;br&gt;&lt;blockquote&gt;&lt;br&gt;&lt;p&gt;PS：更多用法直接去查看.h文件即可。&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;h2 id=&quot;方法替换&quot;&gt;&lt;a href=&quot;#方法替换&quot; class=&quot;headerlink&quot; title=&quot;方法替换&quot;&gt;&lt;/a&gt;方法替换&lt;/h2&gt;&lt;p&gt;API为&lt;code&gt;method_exchangeImplementations&lt;/code&gt;，交换两个方法的实现，一般用来进行黑魔法调试。虽然也可以用来实现AOP切面编程，but…工程里千万慎用，千万慎用，千万慎用。重要的事情说三遍，至于为什么，原因很简单，不好维护，出了错都不知道飞哪儿去了。而要实现方法切面可使用开源的&lt;code&gt;Aspects&lt;/code&gt;。&lt;/p&gt;&lt;br&gt;&lt;blockquote&gt;&lt;br&gt;&lt;p&gt;PS: 所谓的黑魔法调试，比如替换init方法，并打印一句话，方便我们知道哪些class被初始化，而AOP切面编程的概念网上也有很多，随意百度一下即可。&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;h2 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;p&gt;其他还有很多，比如&lt;code&gt;objc_copyClassList&lt;/code&gt;获取所有class，&lt;code&gt;method_setImplementation&lt;/code&gt;给方法重置一个IMP等等。关于runtime的API有点太多了，就不一一列举了。当然关于runtime知识点远不止这些api这么简单，比如消息转发，重定向等等。&lt;/p&gt;&lt;br&gt;&lt;h1 id=&quot;写在最后&quot;&gt;&lt;a href=&quot;#写在最后&quot; class=&quot;headerlink&quot; title=&quot;写在最后&quot;&gt;&lt;/a&gt;写在最后&lt;/h1&gt;&lt;p&gt;but…. runtime有这么多的api，到底有什么用？答案是并没什么卵用，对，虽然没卵用，但还是很重要，不要问我为什么，就因为它是OC底层，核心。作为一位iOSer，了解这些基础是必须的，起码装逼也有了资本。再退一万步来讲，对于面试，这些也会派上用场。不过对于工作中，确实没啥太大的用处，但是如果写框架的话，用处还是特别大，而且作为程序员也不能一直停留在应用层层面。&lt;/p&gt;&lt;br&gt;&lt;p&gt;当然，在工作中用的并不怎么多，但是，还是必须要学的。而标题所谓的放弃的寓意是，让你不要太过于纠结runtime到底有什么用。因为也有很多新人问过笔者runtime到底能做什么….况且现在关于这方面的资料也不多。资料查来查去无非就是消息转发，重定向还有那几个获取变量、方法等几个常用的API而已。当然，对于runtime笔者也连门都没有入。。在此笔者建议新人们一直捉摸不透runtime到底能做什么，倒不如花花时间去研究一下GCD，core foundation等。&lt;/p&gt;&lt;br&gt;&lt;p&gt;以上纯属笔者个人给新人的一些建议以及一些runtime肤浅的用法。&lt;br&gt;欢迎吐槽，请勿喷贴。。。&lt;/p&gt;&lt;br&gt;&lt;blockquote&gt;&lt;br&gt;&lt;p&gt;转载请注明原文出处&lt;/p&gt;&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;p&gt;&lt;img src=&quot;http://i4.piimg.com/a48affaa13187bf8.jpg&quot; alt=&quot;最近很流行的&quot;&gt;&lt;/p&gt;










</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xtu7q.com1.z0.glb.clouddn.com/16-5-12/7638807.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文为转载&lt;br&gt;原文地址：  &lt;a href=&quot;http://xiaopingblog.cn/2016/05/06/runtime%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/&quot;&gt;孝平的博客 —— runtime从入门到放弃&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;h1 id=&quot;GG-背景&quot;&gt;&lt;a href=&quot;#GG-背景&quot; class=&quot;headerlink&quot; title=&quot;GG 背景&quot;&gt;&lt;/a&gt;GG 背景&lt;/h1&gt;&lt;p&gt;本篇不适应&lt;code&gt;runtime&lt;/code&gt;学习，也不涉及&lt;code&gt;runtime&lt;/code&gt;长篇大论的理论知识。本篇只是想让你适当的学会放手。而所谓的入门到放弃中的&lt;code&gt;入门&lt;/code&gt;则是一些&lt;code&gt;runtime&lt;/code&gt;常用&lt;code&gt;apis&lt;/code&gt;的认识和使用场景（笔者工作总结）。而所谓的放弃就是不要太过于执着&lt;code&gt;runtime&lt;/code&gt;，其实它并没有你想象中的那么好。&lt;/p&gt;&lt;/p&gt;
&lt;p&gt;&lt;h1 id=&quot;来嗨起来&quot;&gt;&lt;a href=&quot;#来嗨起来&quot; class=&quot;headerlink&quot; title=&quot;来嗨起来&quot;&gt;&lt;/a&gt;来嗨起来&lt;/h1&gt;&lt;p&gt;现在就让我们开始来旅游&lt;code&gt;runtime&lt;/code&gt;的世界吧~！&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://ganmmeng.cn/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Runtime" scheme="http://ganmmeng.cn/categories/iOS%E5%BC%80%E5%8F%91/Runtime/"/>
    
    
      <category term="iOS开发" scheme="http://ganmmeng.cn/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Runtime" scheme="http://ganmmeng.cn/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Block中级进阶（中）——Block实际应用</title>
    <link href="http://ganmmeng.cn/2016/05/12/untitled-1463040521846/"/>
    <id>http://ganmmeng.cn/2016/05/12/untitled-1463040521846/</id>
    <published>2016-05-12T08:08:41.000Z</published>
    <updated>2016-05-12T08:15:35.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xtu7q.com1.z0.glb.clouddn.com/16-5-12/55643636.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Block确实很简洁，很方便，特别适合处理较为单一的回调，Block可以省去构建复杂的代理委托关系，快速实现回调的功能，但是有利也有弊，使用Block的适合时常也容易出现一些问题，例如最典型的循环引用，而这些问题也容易被大家所忽视，这篇我会用一个例子引出这一系列的问题&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Block的的应用&quot;&gt;&lt;a href=&quot;#Block的的应用&quot; class=&quot;headerlink&quot; title=&quot;Block的的应用&quot;&gt;&lt;/a&gt;Block的的应用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;前面我已经介绍了Block的一些&lt;code&gt;简单&lt;/code&gt;的用法，但是在&lt;code&gt;实际开发中&lt;/code&gt;，我们并不那样去使用它，一半来说Block大多用于&lt;code&gt;对象与对象之间的通信&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;BlockButton的封装&quot;&gt;&lt;a href=&quot;#BlockButton的封装&quot; class=&quot;headerlink&quot; title=&quot;BlockButton的封装&quot;&gt;&lt;/a&gt;BlockButton的封装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;下面我就举个栗子：我们来自定义一个Block按钮，以便省去添加事件的繁琐操作&lt;/strong&gt;&lt;blockquote&gt;
&lt;p&gt;1.首先我们创建一个继承于&lt;code&gt;UIButto&lt;/code&gt;的&lt;code&gt;Class&lt;/code&gt; 叫做 &lt;code&gt;BlcokButton&lt;/code&gt;&lt;br&gt;2.定义好Block类型，创建Block对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  BlockButton.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  blockDemo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Created by GANMENG on 16/5/12.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Copyright © 2016年 BrightOil. All rights reserved.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义Block类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(^ActionBlock)(&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; *);;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BlockButton&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;UIButton&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建一个Block对象，block创建后内存是分配在栈上的，调用copy方法，会将block从栈上移到堆上。当block声明为全局变量时，我们应该调用block的copy方法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) ActionBlock actionBlock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;在.m文件中给Block&lt;code&gt;添加事件&lt;/code&gt;，并且通过&lt;code&gt;ActionBlock回调&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;BlockButton.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BlockButton&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)initWithFrame:(&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt;)frame&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; initWithFrame:frame];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//给button添加事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; action:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(action:) forControlEvents:&lt;span class=&quot;built_in&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark -&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - Action&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)action:(&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; *)sender&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//这里一定要判断Block是否为有值的，不然会造成野指针异常。就像是用代理对象回调的时候也要判断delegate 是否有值并且 delegate是否响应了协议里的方法。p.s. 要养成好的编码习惯&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.actionBlock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.actionBlock(sender);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;就这两个步骤，我们的BlockButton 就封装完了，我们只需要到ViewController中去使用就可以了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;ViewController.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;BlockButton.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BlockButton *blockBtn = [[BlockButton alloc] initWithFrame:&lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [blockBtn setBackgroundColor:[&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; redColor]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    blockBtn.actionBlock = ^(&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; *sender)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;点击了BlockButton&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view addSubview:blockBtn];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*---------输出结果---------*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;prints: blockDemo[6107:1144064] 点击了BlockButton&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;BlockButton的优化&quot;&gt;&lt;a href=&quot;#BlockButton的优化&quot; class=&quot;headerlink&quot; title=&quot;BlockButton的优化&quot;&gt;&lt;/a&gt;BlockButton的优化&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;写到这里，有些同学可能会有疑问了，&lt;code&gt;BlockButton&lt;/code&gt;只能支持&lt;code&gt;TouchUpInside&lt;/code&gt;一种事件类型吗? 难道如果其他事件也想用Block来实现回调还要定义那么多不同的BlockButton吗？&lt;/strong&gt;&lt;blockquote&gt;
&lt;p&gt;其实我们只需要稍微修改一下上面的代码就可以让&lt;code&gt;BlockButton&lt;/code&gt;可以&lt;code&gt;处理各种事件类型&lt;/code&gt;&lt;br&gt;前面有提到过，Block是一个iOS中的&lt;code&gt;对象类型&lt;/code&gt;，它可以在&lt;code&gt;方法&lt;/code&gt;中作为&lt;code&gt;参数传递&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义Block类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(^ActionBlock)(&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; *sender);;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BlockButton&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;UIButton&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//新增的方法，可以传递事件，和Block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)gm_addActionForControlEvents:(&lt;span class=&quot;built_in&quot;&gt;UIControlEvents&lt;/span&gt;)controlEvents callBackWithActionBlock:(ActionBlock)actionBlock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;实现这个方法，给BlockButton所持有的actionBlock赋值，添加事件，block回调&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;BlockButton.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BlockButton&lt;/span&gt; ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建一个Block对象，block创建后内存是分配在栈上的，调用copy方法，会将block从栈上移到堆上。当block声明为全局变量时，我们应该调用block的copy方法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) ActionBlock actionBlock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BlockButton&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark -&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - PublicMethod&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)gm_addActionForControlEvents:(&lt;span class=&quot;built_in&quot;&gt;UIControlEvents&lt;/span&gt;)controlEvents callBackWithActionBlock:(ActionBlock)actionBlock&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//将公用方法传递过来的block对象赋值给&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.actionBlock = actionBlock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; addTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; action:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(action:) forControlEvents:controlEvents];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark -&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - Action&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)action:(&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; *)sender&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//这里一定要判断Block是否为有值的，不然会造成野指针异常。就像是用代理对象回调的时候也要判断delegate 是否有值并且 delegate是否响应了协议里的方法。p.s. 要养成好的编码习惯&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.actionBlock) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.actionBlock(sender);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;这样我们的&lt;code&gt;blockButton&lt;/code&gt;就可以处理各种不同的情况了，而且代码也接近系统的&lt;code&gt;api&lt;/code&gt;，用起来十分顺手！😊&lt;br&gt;在&lt;code&gt;ViewController&lt;/code&gt;中来使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;ViewController.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;BlockButton.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BlockButton *blockBtn = [[BlockButton alloc] initWithFrame:&lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;35&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [blockBtn setBackgroundColor:[&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; redColor]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [blockBtn gm_addActionForControlEvents:&lt;span class=&quot;built_in&quot;&gt;UIControlEventTouchUpInside&lt;/span&gt; callBackWithActionBlock:^(&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; *sender) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;点击了BlockButton&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view addSubview:blockBtn];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*---------输出结果---------*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;prints: blockDemo[6107:1144064] 点击了BlockButton&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;到这里BlockButton也差不多封装完了，当然你也可以通过使用分类来实现。&lt;br&gt;p.s. 这一篇简单的介绍了Block在实际开发中的回调用法，下一篇我会详细讲解循环引用。❤️❤️❤️❤️&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xtu7q.com1.z0.glb.clouddn.com/16-5-12/55643636.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Block确实很简洁，很方便，特别适合处理较为单一的回调，Block可以省去构建复杂的代理委托关系，快速实现回调的功能，但是有利也有弊，使用Block的适合时常也容易出现一些问题，例如最典型的循环引用，而这些问题也容易被大家所忽视，这篇我会用一个例子引出这一系列的问题&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Block的的应用&quot;&gt;&lt;a href=&quot;#Block的的应用&quot; class=&quot;headerlink&quot; title=&quot;Block的的应用&quot;&gt;&lt;/a&gt;Block的的应用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;前面我已经介绍了Block的一些&lt;code&gt;简单&lt;/code&gt;的用法，但是在&lt;code&gt;实际开发中&lt;/code&gt;，我们并不那样去使用它，一半来说Block大多用于&lt;code&gt;对象与对象之间的通信&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;BlockButton的封装&quot;&gt;&lt;a href=&quot;#BlockButton的封装&quot; class=&quot;headerlink&quot; title=&quot;BlockButton的封装&quot;&gt;&lt;/a&gt;BlockButton的封装&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;下面我就举个栗子：我们来自定义一个Block按钮，以便省去添加事件的繁琐操作&lt;/strong&gt;&lt;blockquote&gt;
&lt;p&gt;1.首先我们创建一个继承于&lt;code&gt;UIButto&lt;/code&gt;的&lt;code&gt;Class&lt;/code&gt; 叫做 &lt;code&gt;BlcokButton&lt;/code&gt;&lt;br&gt;2.定义好Block类型，创建Block对象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  BlockButton.h&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  blockDemo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Created by GANMENG on 16/5/12.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//  Copyright © 2016年 BrightOil. All rights reserved.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;UIKit/UIKit.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义Block类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(^ActionBlock)(&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; *);;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BlockButton&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;UIButton&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建一个Block对象，block创建后内存是分配在栈上的，调用copy方法，会将block从栈上移到堆上。当block声明为全局变量时，我们应该调用block的copy方法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;) ActionBlock actionBlock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://ganmmeng.cn/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Block" scheme="http://ganmmeng.cn/categories/iOS%E5%BC%80%E5%8F%91/Block/"/>
    
    
      <category term="iOS开发" scheme="http://ganmmeng.cn/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Block" scheme="http://ganmmeng.cn/tags/Block/"/>
    
  </entry>
  
  <entry>
    <title>Block中级进阶（上）</title>
    <link href="http://ganmmeng.cn/2016/05/11/block-2/"/>
    <id>http://ganmmeng.cn/2016/05/11/block-2/</id>
    <published>2016-05-11T01:48:32.000Z</published>
    <updated>2016-05-12T08:31:16.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xtu7q.com1.z0.glb.clouddn.com/16-5-12/7638807.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;前段时间在公司iOS小组组织了技术分享会，由浅入深的剖析了Block，在这里记录下来，温故而知新&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Block和变量&quot;&gt;&lt;a href=&quot;#Block和变量&quot; class=&quot;headerlink&quot; title=&quot;Block和变量&quot;&gt;&lt;/a&gt;Block和变量&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;变量按作用域又分有全局变量和局部变量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;block代码块内可以引用这两种变量，但是有不同的管理机制&lt;/strong&gt;                &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;代码说明&quot;&gt;&lt;a href=&quot;#代码说明&quot; class=&quot;headerlink&quot; title=&quot;代码说明&quot;&gt;&lt;/a&gt;代码说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在Block里 可以读取变量，但是默认情况是下&lt;code&gt;不能修改&lt;/code&gt;变量的值的&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^myBlock)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) = ^(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a = &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//这里会报错，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%d %d\n&quot;&lt;/span&gt;, a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myBlock(&lt;span class=&quot;number&quot;&gt;110&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//调用Block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*---------输出结果---------*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;prints: 100 110&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Block 能读取变量的原理是 &lt;code&gt;copy&lt;/code&gt;了一份变量的值,也有说是Block将外部变量以&lt;code&gt;常量&lt;/code&gt;的形式存进去。所以在 Block 定义之后修改变量的值，再调用 Block，值依旧是修改前的。换句话说，定义好 Block 之后，修改变量值对 Block 无效。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^myBlock)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) = ^(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a = &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//这里会报错，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%d %d\n&quot;&lt;/span&gt;, a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//在Block定义后修改a的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myBlock(&lt;span class=&quot;number&quot;&gt;110&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//调用Block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*---------输出结果---------*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;prints: 100 110&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;block关键字的用处&quot;&gt;&lt;a href=&quot;#block关键字的用处&quot; class=&quot;headerlink&quot; title=&quot;__block关键字的用处&quot;&gt;&lt;/a&gt;__block关键字的用处&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;如果需要对在block里&lt;code&gt;修改&lt;/code&gt;外部定义的变量，那么需要对这个变量前添加一个&lt;code&gt;__block&lt;/code&gt;修饰。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__block &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//在变量前添加__block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^myBlock)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) = ^(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a = &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//这里不会报错，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%d %d\n&quot;&lt;/span&gt;, a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myBlock(&lt;span class=&quot;number&quot;&gt;110&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//调用Block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*---------输出结果---------*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;prints: 10000 110&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;如果需要在block定义外面&lt;code&gt;修改&lt;/code&gt;变量的值，变量的修改都会影响 block 内部对这个变量的使用，换句话说，block 对变量不再是简单的值复制，而是动态的&lt;code&gt;&amp;quot;监听&amp;quot;&lt;/code&gt;值的变化，然后在调用的时候读取变量&lt;code&gt;修改后&lt;/code&gt;的值，也需要对这个变量添加一个&lt;code&gt;__block&lt;/code&gt;修饰。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;__block &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//在变量前添加__block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^myBlock)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) = ^(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a = &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//这里会报错，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%d %d\n&quot;&lt;/span&gt;, a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//在Block定义后修改a的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myBlock(&lt;span class=&quot;number&quot;&gt;110&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//调用Block 会「动态」识别外部变量的变化，输出10000也就是a最修改后的值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*---------输出结果---------*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;prints: 10000 110&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;最后还要注意区别&lt;code&gt;变量&lt;/code&gt;和&lt;code&gt;指针所指向的变量&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a= &lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSMutableString&lt;/span&gt; *str = [&lt;span class=&quot;built_in&quot;&gt;NSMutableString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;Hello&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^printStr)() = ^() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [str appendString:&lt;span class=&quot;string&quot;&gt;@&quot;World&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;,str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printStr();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*---------输出结果---------*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;prints:  HelloWorld&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么在block里面修改string [str appendString:@”World”];不报错是因为str 是指向@”Hello”的函数指针，[str appendString:@”World”];并不是修改 str 所存储的值，本质上是 str 向@”Hello”发送了一条appendString 消息，然后再更改@”Hello”为@”HelloWorld”，而 str 存储的指向@”HelloWorld”对象的指针没有发生变化。所以， &lt;strong&gt;&lt;code&gt;block&lt;/code&gt;本质上是不能修改变量存储的值，但是消息分发确依旧有效&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xtu7q.com1.z0.glb.clouddn.com/16-5-12/7638807.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;前段时间在公司iOS小组组织了技术分享会，由浅入深的剖析了Block，在这里记录下来，温故而知新&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Block和变量&quot;&gt;&lt;a href=&quot;#Block和变量&quot; class=&quot;headerlink&quot; title=&quot;Block和变量&quot;&gt;&lt;/a&gt;Block和变量&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;变量按作用域又分有全局变量和局部变量&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;block代码块内可以引用这两种变量，但是有不同的管理机制&lt;/strong&gt;                &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;代码说明&quot;&gt;&lt;a href=&quot;#代码说明&quot; class=&quot;headerlink&quot; title=&quot;代码说明&quot;&gt;&lt;/a&gt;代码说明&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在Block里 可以读取变量，但是默认情况是下&lt;code&gt;不能修改&lt;/code&gt;变量的值的&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (^myBlock)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;) = ^(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a = &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//这里会报错，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%d %d\n&quot;&lt;/span&gt;, a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myBlock(&lt;span class=&quot;number&quot;&gt;110&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//调用Block&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*---------输出结果---------*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;prints: 100 110&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://ganmmeng.cn/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Block" scheme="http://ganmmeng.cn/categories/iOS%E5%BC%80%E5%8F%91/Block/"/>
    
    
      <category term="iOS开发" scheme="http://ganmmeng.cn/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Block" scheme="http://ganmmeng.cn/tags/Block/"/>
    
  </entry>
  
  <entry>
    <title>Block 初识</title>
    <link href="http://ganmmeng.cn/2016/05/09/Block-1/"/>
    <id>http://ganmmeng.cn/2016/05/09/Block-1/</id>
    <published>2016-05-09T01:40:41.000Z</published>
    <updated>2016-05-12T08:17:03.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://7xtu7q.com1.z0.glb.clouddn.com/16-5-12/7378074.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;前段时间在公司iOS小组组织了技术分享会，由浅入深的剖析了Block，在这里记录下来，温故而知新&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是Block&quot;&gt;&lt;a href=&quot;#什么是Block&quot; class=&quot;headerlink&quot; title=&quot;什么是Block&quot;&gt;&lt;/a&gt;什么是Block&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Block是iOS4之后新增的一种语法结构，也称之为“闭包（closure）”&lt;/li&gt;
&lt;li&gt;Block是iOS中一种比较特殊的&lt;code&gt;数据类型&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;是一个能工作的代码单元，可以在&lt;code&gt;任何需要的时候&lt;/code&gt;被执行&lt;/li&gt;
&lt;li&gt;本质是轻量级的&lt;code&gt;匿名函数&lt;/code&gt;，可以作为其他函数的参数或者返回值。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Block是苹果官方特别&lt;code&gt;推荐使用&lt;/code&gt;的数据类型, 应用场景比较广泛&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动画&lt;/li&gt;
&lt;li&gt;多线程&lt;/li&gt;
&lt;li&gt;集合遍历&lt;/li&gt;
&lt;li&gt;网络请求回调&lt;/li&gt;
&lt;li&gt;新版的AlertController等等等…&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Block的作用&quot;&gt;&lt;a href=&quot;#Block的作用&quot; class=&quot;headerlink&quot; title=&quot;Block的作用&quot;&gt;&lt;/a&gt;Block的作用&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用来保存某一段代码, 可以在&lt;code&gt;恰当的时间&lt;/code&gt;再取出来&lt;code&gt;调用&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能类似于&lt;code&gt;函数和方法&lt;/code&gt;&lt;/strong&gt;  &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Block的格式&quot;&gt;&lt;a href=&quot;#Block的格式&quot; class=&quot;headerlink&quot; title=&quot;Block的格式&quot;&gt;&lt;/a&gt;Block的格式&lt;/h2&gt;&lt;h3 id=&quot;直接定义Block变量&quot;&gt;&lt;a href=&quot;#直接定义Block变量&quot; class=&quot;headerlink&quot; title=&quot;直接定义Block变量&quot;&gt;&lt;/a&gt;直接定义Block变量&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xtu7q.com1.z0.glb.clouddn.com/16-5-9/10169775.jpg&quot; alt=&quot;block.png&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Block-的定义格式&quot;&gt;&lt;a href=&quot;#Block-的定义格式&quot; class=&quot;headerlink&quot; title=&quot;Block 的定义格式&quot;&gt;&lt;/a&gt;Block 的定义格式&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;返回值类型 (^block变量名)(形参列表) = ^(形参列表) &amp;#123;//do something&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;1-block最简单形式（无形参无返回值）&quot;&gt;&lt;a href=&quot;#1-block最简单形式（无形参无返回值）&quot; class=&quot;headerlink&quot; title=&quot;1.block最简单形式（无形参无返回值）&quot;&gt;&lt;/a&gt;1.block最简单形式（&lt;code&gt;无形参无返回值&lt;/code&gt;）&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void (^block参数名)() = ^&amp;#123;代码块...&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void (^myBlock)() = ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  NSLog(@&amp;quot;doSomething&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;2-block中级进阶形式（有形参无返回值）&quot;&gt;&lt;a href=&quot;#2-block中级进阶形式（有形参无返回值）&quot; class=&quot;headerlink&quot; title=&quot;2.block中级进阶形式（有形参无返回值）&quot;&gt;&lt;/a&gt;2.block中级进阶形式（&lt;code&gt;有形参无返回值&lt;/code&gt;）&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void (^block名称)(参数列表) = ^ (参数列表) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 代码实现 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void (^myBlock)(int) = ^(int a)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  NSLog(@&amp;quot;a = %d&amp;quot;, a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;3-block高级进阶形式（有形参有返回值）&quot;&gt;&lt;a href=&quot;#3-block高级进阶形式（有形参有返回值）&quot; class=&quot;headerlink&quot; title=&quot;3.block高级进阶形式（有形参有返回值）&quot;&gt;&lt;/a&gt;3.block高级进阶形式（&lt;code&gt;有形参有返回值&lt;/code&gt;）&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;返回类型 (^block名称)(参数列表) = ^ 返回类型 (参数列表) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 代码实现...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;int (^myBlock)(int, int) = ^(int a, int b)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return a + b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;调用Block&quot;&gt;&lt;a href=&quot;#调用Block&quot; class=&quot;headerlink&quot; title=&quot;调用Block&quot;&gt;&lt;/a&gt;调用Block&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;block变量名(参数);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;定义Block的类型&quot;&gt;&lt;a href=&quot;#定义Block的类型&quot; class=&quot;headerlink&quot; title=&quot;定义Block的类型&quot;&gt;&lt;/a&gt;定义Block的类型&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;typedef 返回值 (^Block类型名)(参数);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef int (^MyFirstBlock)(int);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;使用自定义Block类型声明Block对象&quot;&gt;&lt;a href=&quot;#使用自定义Block类型声明Block对象&quot; class=&quot;headerlink&quot; title=&quot;使用自定义Block类型声明Block对象&quot;&gt;&lt;/a&gt;使用自定义Block类型声明Block对象&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;类型名 变量名 = (^ 参数)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    retrun result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例如：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MyFirstBlock myBlock = ^(int a)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return a * a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;未完待续&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xtu7q.com1.z0.glb.clouddn.com/16-5-12/7378074.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;前段时间在公司iOS小组组织了技术分享会，由浅入深的剖析了Block，在这里记录下来，温故而知新&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是Block&quot;&gt;&lt;a href=&quot;#什么是Block&quot; class=&quot;headerlink&quot; title=&quot;什么是Block&quot;&gt;&lt;/a&gt;什么是Block&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Block是iOS4之后新增的一种语法结构，也称之为“闭包（closure）”&lt;/li&gt;
&lt;li&gt;Block是iOS中一种比较特殊的&lt;code&gt;数据类型&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;是一个能工作的代码单元，可以在&lt;code&gt;任何需要的时候&lt;/code&gt;被执行&lt;/li&gt;
&lt;li&gt;本质是轻量级的&lt;code&gt;匿名函数&lt;/code&gt;，可以作为其他函数的参数或者返回值。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Block是苹果官方特别&lt;code&gt;推荐使用&lt;/code&gt;的数据类型, 应用场景比较广泛&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动画&lt;/li&gt;
&lt;li&gt;多线程&lt;/li&gt;
&lt;li&gt;集合遍历&lt;/li&gt;
&lt;li&gt;网络请求回调&lt;/li&gt;
&lt;li&gt;新版的AlertController等等等…&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Block的作用&quot;&gt;&lt;a href=&quot;#Block的作用&quot; class=&quot;headerlink&quot; title=&quot;Block的作用&quot;&gt;&lt;/a&gt;Block的作用&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用来保存某一段代码, 可以在&lt;code&gt;恰当的时间&lt;/code&gt;再取出来&lt;code&gt;调用&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能类似于&lt;code&gt;函数和方法&lt;/code&gt;&lt;/strong&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://ganmmeng.cn/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Block" scheme="http://ganmmeng.cn/categories/iOS%E5%BC%80%E5%8F%91/Block/"/>
    
    
      <category term="iOS开发" scheme="http://ganmmeng.cn/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="Block" scheme="http://ganmmeng.cn/tags/Block/"/>
    
  </entry>
  
  <entry>
    <title>建站小记</title>
    <link href="http://ganmmeng.cn/2016/05/06/untitled-1462496926972/"/>
    <id>http://ganmmeng.cn/2016/05/06/untitled-1462496926972/</id>
    <published>2016-05-06T01:08:46.000Z</published>
    <updated>2016-05-09T05:12:45.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;从小就喜欢玩电脑，一直有一个梦想就是能有一个自己的网站，觉得这是一个很酷的事情，所以经过一个星期的研究和学习，总于搭建了一个属于我&amp;gt; 自己的博客，是不是很酷！？我本来就是一个不善言表的人，虽然博客是顺利的搭建出来了，但是内容嘛。。所以我决定每周都一定要来更新我的博客，可能是技术也可能是其他的文字内容和个人感悟，以此来提升自己也希望能帮助到大家～加油&lt;/code&gt;感觉萌&lt;code&gt;！&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于github&quot;&gt;&lt;a href=&quot;#关于github&quot; class=&quot;headerlink&quot; title=&quot;关于github&quot;&gt;&lt;/a&gt;关于github&lt;/h2&gt;&lt;p&gt;1.我的开发环境是&lt;code&gt;OS X&lt;/code&gt;，Mac是自带git的所以也免去了配置git的步骤，我的这个博客其实就是使用&lt;code&gt;github Pages&lt;/code&gt;，然后配合目前最好用的博客框架—hexo搭建的，&lt;code&gt;hexo&lt;/code&gt;是出自一个台湾大学生之手，比起其他的jekll等更好用，而且官方文档也支持中文，很容易看懂，我推荐一篇关于如何搭建个人博客的文章，虽然很容易，但是搭建的过程中也遇到了很多坑。—-&amp;gt;&lt;a href=&quot;http://xiaopingblog.cn/2016/04/08/untitled-1460084538799/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;文章传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.最近加了一个github iOS 大牛建的iOS高端开发群，我发现自己真的很菜（之前还有点沾沾自喜觉得该会的都会了）程序猿就是这样，学无止境，你不进步就会慢慢被淘汰，我要学的还有很多多，我今年的目标其实很早就定下来了，例如掌握&lt;code&gt;swift&lt;/code&gt;，&lt;code&gt;入门H5&lt;/code&gt;，&lt;code&gt;学习React Native&lt;/code&gt;，可是现实情况就是几乎还没启动！！！我的计划过开源一些框架，当至少目前为止我的github上还是空空如也！！！我的拖延症是时候治治了！今天写这篇文子也是要给自己提个醒，该醒悟了，什么英雄联盟，手机游戏等等都是麻痹自己的，年纪不小了，已经不是玩那些东西的年纪了！&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于拖延症&quot;&gt;&lt;a href=&quot;#关于拖延症&quot; class=&quot;headerlink&quot; title=&quot;关于拖延症&quot;&gt;&lt;/a&gt;关于拖延症&lt;/h2&gt;&lt;p&gt;以前还没觉得，之前是在一家外包公司干了一年多，天天任务排的满满的，晚上回去有的时候还会为第二天的工作做写准备，现在的这家公司的节奏和之前完全不一样，没有加班，任务比较轻松，每天上班把该完成的做完基本上就可以逛逛论坛，看看大牛的博客等等，但是回到家里之后就再也没有了从前的那种激情（躺在床上玩手机游戏，看泡沫剧等等）虽然也有想过要去学习，比如我会在心里说该看看斯坦福的iOS视频了，该学swift了，该看新买的有关H5的书了，但是每次脑海中都有一个声音：过几天在看，反正时间还多，公司事情也不忙，就这样本来计划15年看完的斯坦福公开课至今都没看完，我在TED的视频中看到有关拖延症的（&lt;a href=&quot;http://open.163.com/movie/2016/3/Q/E/MBHQSM52F_MBI15O7QE.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TED拖延症视频&lt;/a&gt;），OMG这不是和我的情况类似吗。。，更可怕的是这还是没有期限的拖延症。p.s. 难道我的大脑里真的有个猴子在掌舵吗。。拖延症太可怕了！！！&lt;/p&gt;
&lt;h2 id=&quot;关于hexo&quot;&gt;&lt;a href=&quot;#关于hexo&quot; class=&quot;headerlink&quot; title=&quot;关于hexo&quot;&gt;&lt;/a&gt;关于hexo&lt;/h2&gt;&lt;p&gt;hexo的安装需要两个前提条件：安装git和nodejs。&lt;br&gt;参见&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo官方文档&lt;/a&gt;。nodejs有Mac下的&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;安装包下载地址&lt;/a&gt;，安装的时候注意添加node环境变量，然后再用&lt;code&gt;npm install -g hexo&lt;/code&gt;一句代码就能安装好了。如果报错那就是权限问题在前面加上&lt;code&gt;sudo&lt;/code&gt;就可以了，像这样&lt;code&gt;sudo npm install -g&lt;/code&gt;.&lt;br&gt;接下来，我还要谢谢&lt;a href=&quot;https://github.com/biggercoffee&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;锤神&lt;/a&gt;，是他耐心的解答我遇到的各种问题，十分感谢！&lt;/p&gt;
&lt;h2 id=&quot;关于ganmmeng-cn&quot;&gt;&lt;a href=&quot;#关于ganmmeng-cn&quot; class=&quot;headerlink&quot; title=&quot;关于ganmmeng.cn&quot;&gt;&lt;/a&gt;关于ganmmeng.cn&lt;/h2&gt;&lt;p&gt;我是是一个选择恐惧症患者，这个域名是我话了一上午时间才确定的，毕竟是我人生中第一个域名。。虽然才花了29块钱 ＝＝。。叫ganmmeng是因为我的小名就叫萌萌，我是男的！还有我姓甘，最后我的第一个域名就这样诞生了！当然这些都不是重点，只有坚持写出好的东西，分享自己的经验和心得，这个博客才能有更多的意义吧。&lt;/p&gt;
&lt;h2 id=&quot;关于我&quot;&gt;&lt;a href=&quot;#关于我&quot; class=&quot;headerlink&quot; title=&quot;关于我&quot;&gt;&lt;/a&gt;关于我&lt;/h2&gt;&lt;p&gt;我就是一个普通的程序猿，有一些情怀和理想，经历过成功与失败，但还是热爱我的生活和事业，希望尽自己的努力去生活的快乐。最后放上一段前几天看到的鸡汤&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“你20几岁的努力与沉淀，是为30岁以后的优质生活打下基础。现在的我，可以理直气壮的因为贫穷这件事来不断督促自己努力进步。我知道，这辈子也许无法大富大贵，但只要平安健康也是知足。至少，我一直处于努力状态中，奔跑的姿态会告诉我并没有辜负时间”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为自己加油！&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2016.4.29
Gan
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;从小就喜欢玩电脑，一直有一个梦想就是能有一个自己的网站，觉得这是一个很酷的事情，所以经过一个星期的研究和学习，总于搭建了一个属于我&amp;gt; 自己的博客，是不是很酷！？我本来就是一个不善言表的人，虽然博客是顺利的搭建出来了，但是内容嘛。。所以我决定每周都一定要来更新我的博客，可能是技术也可能是其他的文字内容和个人感悟，以此来提升自己也希望能帮助到大家～加油&lt;/code&gt;感觉萌&lt;code&gt;！&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;关于github&quot;&gt;&lt;a href=&quot;#关于github&quot; class=&quot;headerlink&quot; title=&quot;关于github&quot;&gt;&lt;/a&gt;关于github&lt;/h2&gt;&lt;p&gt;1.我的开发环境是&lt;code&gt;OS X&lt;/code&gt;，Mac是自带git的所以也免去了配置git的步骤，我的这个博客其实就是使用&lt;code&gt;github Pages&lt;/code&gt;，然后配合目前最好用的博客框架—hexo搭建的，&lt;code&gt;hexo&lt;/code&gt;是出自一个台湾大学生之手，比起其他的jekll等更好用，而且官方文档也支持中文，很容易看懂，我推荐一篇关于如何搭建个人博客的文章，虽然很容易，但是搭建的过程中也遇到了很多坑。—-&amp;gt;&lt;a href=&quot;http://xiaopingblog.cn/2016/04/08/untitled-1460084538799/&quot;&gt;文章传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2.最近加了一个github iOS 大牛建的iOS高端开发群，我发现自己真的很菜（之前还有点沾沾自喜觉得该会的都会了）程序猿就是这样，学无止境，你不进步就会慢慢被淘汰，我要学的还有很多多，我今年的目标其实很早就定下来了，例如掌握&lt;code&gt;swift&lt;/code&gt;，&lt;code&gt;入门H5&lt;/code&gt;，&lt;code&gt;学习React Native&lt;/code&gt;，可是现实情况就是几乎还没启动！！！我的计划过开源一些框架，当至少目前为止我的github上还是空空如也！！！我的拖延症是时候治治了！今天写这篇文子也是要给自己提个醒，该醒悟了，什么英雄联盟，手机游戏等等都是麻痹自己的，年纪不小了，已经不是玩那些东西的年纪了！&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://ganmmeng.cn/categories/blog/"/>
    
    
      <category term="杂" scheme="http://ganmmeng.cn/tags/%E6%9D%82/"/>
    
      <category term="blog" scheme="http://ganmmeng.cn/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>hexo-hey</title>
    <link href="http://ganmmeng.cn/2016/04/29/untitled-1461912646136/"/>
    <id>http://ganmmeng.cn/2016/04/29/untitled-1461912646136/</id>
    <published>2016-04-29T06:50:46.000Z</published>
    <updated>2016-05-09T05:05:43.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Hey-hexo-真的很强大&quot;&gt;&lt;a href=&quot;#Hey-hexo-真的很强大&quot; class=&quot;headerlink&quot; title=&quot;Hey hexo 真的很强大&quot;&gt;&lt;/a&gt;Hey hexo 真的很强大&lt;/h1&gt;&lt;p&gt;an admin plugin for hexo, support hexo v3.x&lt;br&gt;built with gulp + babel + webpack&lt;br&gt;using es6 + angular + materail + jwt&lt;/p&gt;
&lt;h2 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://nihgwu.github.io/hexo-hey/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nihgwu.github.io/hexo-hey/&lt;/a&gt;&lt;br&gt;username: hexo&lt;br&gt;passowrd: hey  &lt;/p&gt;
&lt;h2 id=&quot;About&quot;&gt;&lt;a href=&quot;#About&quot; class=&quot;headerlink&quot; title=&quot;About&quot;&gt;&lt;/a&gt;About&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;client framework: &lt;a href=&quot;https://github.com/angular/angular.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dashboard ui: &lt;a href=&quot;https://github.com/angular/material&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;material&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;authentication: &lt;a href=&quot;https://github.com/auth0/node-jsonwebtoken&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jwt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;markdown parser: &lt;a href=&quot;https://github.com/chjj/marked&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;marked&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;markdown style: &lt;a href=&quot;https://github.com/sindresorhus/github-markdown-css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github-markdown-css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;markdown editor: &lt;a href=&quot;https://github.com/codemirror/CodeMirror&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;codemirror&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h2&gt;&lt;h3 id=&quot;1-install-hexo-hey&quot;&gt;&lt;a href=&quot;#1-install-hexo-hey&quot; class=&quot;headerlink&quot; title=&quot;1. install hexo-hey&quot;&gt;&lt;/a&gt;1. install hexo-hey&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-hey --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-add-a-admin-config-section-to-config-yml&quot;&gt;&lt;a href=&quot;#2-add-a-admin-config-section-to-config-yml&quot; class=&quot;headerlink&quot; title=&quot;2. add a admin config section to _config.yml:&quot;&gt;&lt;/a&gt;2. add a admin config section to &lt;code&gt;_config.yml&lt;/code&gt;:&lt;/h3&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Admin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;admin:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    password:&lt;/span&gt; hey&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    secret:&lt;/span&gt; hey hexo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    expire:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# cors: http://localhost:3000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;cors is optional if you want serve your client in another place(CDN for example)&lt;/p&gt;
&lt;h3 id=&quot;3-serve-hexo&quot;&gt;&lt;a href=&quot;#3-serve-hexo&quot; class=&quot;headerlink&quot; title=&quot;3. serve hexo&quot;&gt;&lt;/a&gt;3. serve hexo&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo serve&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;then visit &lt;code&gt;http://localhost:4000/admin&lt;/code&gt; , and login with the account set in previous step&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hey-hexo-真的很强大&quot;&gt;&lt;a href=&quot;#Hey-hexo-真的很强大&quot; class=&quot;headerlink&quot; title=&quot;Hey hexo 真的很强大&quot;&gt;&lt;/a&gt;Hey hexo 真的很强大&lt;/h1&gt;&lt;p&gt;an admin plugin for hexo, support hexo v3.x&lt;br&gt;built with gulp + babel + webpack&lt;br&gt;using es6 + angular + materail + jwt&lt;/p&gt;
&lt;h2 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://nihgwu.github.io/hexo-hey/&quot;&gt;http://nihgwu.github.io/hexo-hey/&lt;/a&gt;&lt;br&gt;username: hexo&lt;br&gt;passowrd: hey  &lt;/p&gt;
&lt;h2 id=&quot;About&quot;&gt;&lt;a href=&quot;#About&quot; class=&quot;headerlink&quot; title=&quot;About&quot;&gt;&lt;/a&gt;About&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;client framework: &lt;a href=&quot;https://github.com/angular/angular.js&quot;&gt;angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;dashboard ui: &lt;a href=&quot;https://github.com/angular/material&quot;&gt;material&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;authentication: &lt;a href=&quot;https://github.com/auth0/node-jsonwebtoken&quot;&gt;jwt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;markdown parser: &lt;a href=&quot;https://github.com/chjj/marked&quot;&gt;marked&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;markdown style: &lt;a href=&quot;https://github.com/sindresorhus/github-markdown-css&quot;&gt;github-markdown-css&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;markdown editor: &lt;a href=&quot;https://github.com/codemirror/CodeMirror&quot;&gt;codemirror&lt;/a&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://ganmmeng.cn/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://ganmmeng.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ganmmeng.cn/2016/04/29/hello-world/"/>
    <id>http://ganmmeng.cn/2016/04/29/hello-world/</id>
    <published>2016-04-29T04:39:04.000Z</published>
    <updated>2016-05-09T05:05:31.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="ALL" scheme="http://ganmmeng.cn/categories/ALL/"/>
    
    
      <category term="杂" scheme="http://ganmmeng.cn/tags/%E6%9D%82/"/>
    
  </entry>
  
</feed>
